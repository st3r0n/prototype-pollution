finding prototype pollution
1. manually--->
 vulnerable-website.com/?__proto__[foo]=bar 
vulnerable-website.com/?__proto__.foo=bar
tyr to add arbitrary property here URl is used also try in json
once you do this in you browser console inspecct object.prototype.foo   ---> change property name here

2.using DOM invader   ---> written at last

finding protoype pollution gadget


manual is slightly hard so leave --> it is just interceptinf responce and adding debbuger to it such that it retutns stack trace and logs which can be helpful for us
WE CAN MAKE USE OF DOM INAVDER FOR COMPLETE ATTACK
usiing dom invader ios seasy justa enable it in burp browser and use it to exploit it

no for manula exploitatioan we need following:
find source by using __proto__.foo=bar or __proto__[foor]=bar in url or in json----->
then use devtools and type Object.prototype in console to looke if we have any new property names as foo with value bar---->
if it does look at sources tab or debugger tab in browser and see thre codes -----> it would have some gadget we can use
make use of gadget and exploit it as needed

+++++++++++prototype pollution via constructor++++++++++++++
if __proto__ is blocked we may be able to still cause pollution using;
constructor.prototype.foo=bar or use []

if flawed validation we may use -->vulnerable-website.com/?__pro__proto__to__.gadget=payload
sometimes the validation may be flawed we can check that from sources or debugger file in devtools for that then we might use something like
/?__pro__proto__to__[foo]=bar
/?__pro__proto__to__.foo=bar
/?constconstructorructor[protoprototypetype][foo]=bar
/?constconstructorructor.protoprototypetype.foo=bar

++++++++++++++++++++prototype pollution in ecternal linbraries++++++++++++++++++++++++++++++++++++
we require Dom invader fro that 
use dom invader to discover third party modules and then craft payload ----> like in this lab we got to kne abut hitcallback now se can create hit callback to fetch cookie 
